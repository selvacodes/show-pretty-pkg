// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs                      = require("fs");
var List                    = require("bs-platform/lib/js/list.js");
var Path                    = require("path");
var Block                   = require("bs-platform/lib/js/block.js");
var Utils$ShowPrettyPkg     = require("./Utils.js");
var Constants$ShowPrettyPkg = require("./Constants.js");

var fileName = ".gitignore";

function string_of_lineT(line) {
  if (typeof line === "number") {
    return "\n";
  } else if (line.tag) {
    return "# " + (String(line[0]) + "\n");
  } else {
    return line[0] + "\n";
  }
}

var nodeIgnore = /* :: */[
  /* Comment */Block.__(1, ["Dependency directories"]),
  /* :: */[
    /* Ignore */Block.__(0, ["node_modules/"]),
    /* [] */0
  ]
];

var vimIgnore = /* :: */[
  /* Comment */Block.__(1, ["vim swap"]),
  /* :: */[
    /* Ignore */Block.__(0, ["*.swp"]),
    /* :: */[
      /* Ignore */Block.__(0, [".*.*.sw[a-z]"]),
      /* :: */[
        /* Ignore */Block.__(0, ["[._]*.s[a-w][a-z]"]),
        /* :: */[
          /* Ignore */Block.__(0, ["[._]s[a-w][a-z]"]),
          /* :: */[
            /* Ignore */Block.__(0, ["*.swo"]),
            /* :: */[
              /* Ignore */Block.__(0, ["*~/"]),
              /* [] */0
            ]
          ]
        ]
      ]
    ]
  ]
];

var logsIgnore = /* :: */[
  /* Comment */Block.__(1, ["Logs"]),
  /* :: */[
    /* Ignore */Block.__(0, ["*.log"]),
    /* :: */[
      /* Ignore */Block.__(0, ["logs"]),
      /* :: */[
        /* Ignore */Block.__(0, ["npm-debug.log*"]),
        /* :: */[
          /* Ignore */Block.__(0, ["yarn-debug.log*"]),
          /* :: */[
            /* Ignore */Block.__(0, ["yarn-error.log*"]),
            /* [] */0
          ]
        ]
      ]
    ]
  ]
];

var ignoreAll = /* Sections */Block.__(0, [/* :: */[
      nodeIgnore,
      /* :: */[
        vimIgnore,
        /* :: */[
          logsIgnore,
          /* [] */0
        ]
      ]
    ]]);

function ignoreSection(section) {
  return List.fold_left(Utils$ShowPrettyPkg.joinStrings, "", List.map(string_of_lineT, section));
}

var tmp;

tmp = ignoreAll.tag ? /* :: */[
    string_of_lineT(ignoreAll[0]),
    /* [] */0
  ] : List.map(ignoreSection, ignoreAll[0]);

var allIgnoreed = List.fold_left(Utils$ShowPrettyPkg.joinWithNewLine, "", tmp);

var filePath = Path.join(Constants$ShowPrettyPkg.rootExecPath, fileName);

console.log(filePath);

Fs.writeFileSync(filePath, allIgnoreed);

var content = "test";

var distDirectories = /* :: */[
  /* Comment */Block.__(1, ["Common output dirs"]),
  /* :: */[
    /* Ignore */Block.__(0, ["out"]),
    /* :: */[
      /* Ignore */Block.__(0, ["build"]),
      /* :: */[
        /* Ignore */Block.__(0, ["lib"]),
        /* :: */[
          /* Ignore */Block.__(0, ["dist"]),
          /* [] */0
        ]
      ]
    ]
  ]
];

exports.fileName        = fileName;
exports.content         = content;
exports.string_of_lineT = string_of_lineT;
exports.nodeIgnore      = nodeIgnore;
exports.vimIgnore       = vimIgnore;
exports.logsIgnore      = logsIgnore;
exports.distDirectories = distDirectories;
exports.ignoreAll       = ignoreAll;
exports.ignoreSection   = ignoreSection;
exports.allIgnoreed     = allIgnoreed;
exports.filePath        = filePath;
/* allIgnoreed Not a pure module */
